import asyncio
import threading
import traceback
from uuid import uuid4
from aiogram import Bot, Dispatcher, types
import loguru
from etc.keyboards import Keyboards
from loader import *
from aiogram.dispatcher.filters import Command, ChatTypeFilter
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from config import API_ID, API_HASH, BOT_TOKEN
from models import TgUser, UserbotSession
from pyroProcessing import start_pyro_client, userbotSessionToPyroClient
from states import AuthSessionState
import pyrogram
from pyrogram.errors import FloodWait, SessionPasswordNeeded, PhoneNumberInvalid, PhoneCodeExpired, PhoneCodeInvalid


async def sendUb(msg: Message, ubot: UserbotSession, edit=False):
    func = msg.answer if not edit else msg.edit_text
    maybe_dead_text = "\n\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!" if ubot.is_dead else ""
    await func(f"–Æ–∑–µ—Ä–±–æ—Ç <code>{ubot.name}</code>\n"
               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{ubot.login}</code>\n\n"
               f"–°—Ç—Ä–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>{ubot.string_session}</code>" + maybe_dead_text, reply_markup=Keyboards.USessions.showUSession(ubot))


@dp.callback_query_handler(text_contains="|usessions", state="*")
async def _(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    user = TgUser.objects.get({'_id': c.from_user.id})

    if action == "main":
        sessions = UserbotSession.objects.all()
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é", reply_markup=Keyboards.USessions.main(sessions))
    if action == "new":
        await c.answer()
        await c.message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º! –¢–µ–ª–µ–≥—Ä–∞–º –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–∑-–∑–∞ —á–µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –Ω–µ —É–¥–∞—Å—Ç—å—Å—è!\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏:")
        await AuthSessionState.session_name.set()
    if action == "see":
        us: UserbotSession = UserbotSession.objects.get(
            {'_id': c.data.split(":")[2]})
        await sendUb(c.message, us, True)
        await c.answer()
    if action == "reauthorize":
        await c.answer()
        us: UserbotSession = UserbotSession.objects.get(
            {'_id': c.data.split(":")[2]})
        await c.message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º! –¢–µ–ª–µ–≥—Ä–∞–º –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–∑-–∑–∞ —á–µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –Ω–µ —É–¥–∞—Å—Ç—å—Å—è!\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ù–û–í–û–ï –∏–º—è —Å–µ—Å—Å–∏–∏:")
        await state.update_data(editing_us_id=us.id)
        await AuthSessionState.session_name.set()
    if action == "delete_popup":
        await c.answer()
        us: UserbotSession = UserbotSession.objects.get(
            {'_id': c.data.split(":")[2]})
        await c.message.answer(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ–∏—Ç—Ç–µ —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞ <b>{us.name}</b>?", reply_markup=Keyboards.Popup(f"|usessions:delete:{us.id}"))
    if action == "delete":
        global threads
        us: UserbotSession = UserbotSession.objects.get(
            {'_id': c.data.split(":")[2]})
        await c.message.answer(f"üóëÔ∏è –Æ–∑–µ—Ä–±–æ—Ç <b>{us.name}</b> —É–¥–∞–ª—ë–Ω")
        if us.id in threads:
            threads[us.id]['stop_event'].set()
        us.delete()

        sessions = UserbotSession.objects.all()
        await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é", reply_markup=Keyboards.USessions.main(sessions))


async def sendCode(message: Message, state: FSMContext):
    global pyrogram_clients
    stateData = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Pyrogram –∫–ª–∏–µ–Ω—Ç–∞

    client: pyrogram.Client = pyrogram.Client(
        ":memory:", api_id=API_ID, api_hash=API_HASH, in_memory=True)

    try:
        await client.connect()
        send_code_info = await client.send_code(stateData['login'])
        await state.update_data(phone_code_hash=send_code_info.phone_code_hash)

        pyrogram_clients.append(client)
        await message.answer("‚úèÔ∏è –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
        print(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {send_code_info}")
    except FloodWait as e:
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e} —Å–µ–∫—É–Ω–¥.")
        return
    except PhoneNumberInvalid as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑:")
        await AuthSessionState.login.set()
        return


@dp.callback_query_handler(ChatTypeFilter(ChatType.PRIVATE), text_contains="|us_auth", state="*")
async def _(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "send_new_code":
        await sendCode(c.message, state)


@dp.message_handler(Command("auth_ub"))
async def add_session_handler(message: types.Message):
    await message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É—Ç —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º! –¢–µ–ª–µ–≥—Ä–∞–º –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–∑-–∑–∞ —á–µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –Ω–µ —É–¥–∞—Å—Ç—å—Å—è!\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏:")
    await AuthSessionState.session_name.set()


@dp.message_handler(state=AuthSessionState.session_name)
async def session_name_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Pyrogram –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –µ–≥–æ.
    """
    session_name = message.text[:25]
    await state.update_data(session_name=session_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏:")
    await AuthSessionState.login.set()


@dp.message_handler(state=AuthSessionState.login)
async def login_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Pyrogram –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    global pyrogram_clients
    login = message.text.replace(' ', '').replace('-', '')
    await state.update_data(login=login)

    await sendCode(message, state)

    await AuthSessionState.code.set()


@dp.message_handler(state=AuthSessionState.code)
async def code_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram.
    """
    global pyrogram_clients

    code = message.text.strip()
    stateData = await state.get_data()
    print(
        f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {code}, phone_code_hash: {stateData['phone_code_hash']}")

    client: pyrogram.Client = pyrogram_clients[-1]
    try:
        await client.sign_in(stateData['login'], stateData['phone_code_hash'], phone_code=code)
    except SessionPasswordNeeded:
        hint = await client.get_password_hint()
        await message.answer(f"‚úèÔ∏è –î–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–∞—Ä–æ–ª—è: <code>{hint}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        await AuthSessionState.password.set()
    except PhoneCodeExpired:
        await message.answer("‚ö†Ô∏è –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥:")
        await AuthSessionState.code.set()
    except PhoneCodeInvalid:
        await message.answer("‚ö†Ô∏è –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥:",
                             reply_markup=Keyboards.US_Auth.sendNewCode(stateData['login']))
        await AuthSessionState.code.set()
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: <b>{e}</b>")
    else:
        await authSession(message, client, state)


@dp.message_handler(state=AuthSessionState.password)
async def password_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram.
    """
    global pyrogram_clients
    password = message.text
    client: pyrogram.Client = pyrogram_clients[-1]

    try:
        await client.check_password(password)
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: <b>{e}</b>")
    else:
        await authSession(message, client, state)


async def authSession(message: Message, client, state):
    global threads
    user: TgUser = TgUser.objects.get({"_id": message.from_user.id})

    stateData = await state.get_data()
    string_session = await client.export_session_string()
    if 'editing_us_id' in stateData:
        us: UserbotSession = UserbotSession.objects.get(
            {"_id": stateData['editing_us_id']})
        us.name = stateData['session_name']
        us.string_session = string_session
        us.login = stateData['login']
        us.is_dead = False
        us.save()
        # Try to stop current userbot client
        try:
            threads[us.id]['stop_event'].set()
        except Exception as e:
            loguru.logger.error(
                f"Can't stop current userbot client, error: {e}, traceback: {traceback.format_exc()}")

    else:
        us = UserbotSession(id=str(uuid4())[:12],
                            owner_id=user.user_id,
                            name=stateData['session_name'],
                            login=stateData['login'],
                            string_session=string_session,
                            is_dead=False).save()
    await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
    await state.finish()
    await dp.storage.reset_data(chat=user.user_id)
    await sendUb(message, us, False)
    await client.disconnect()

    try:
        client = userbotSessionToPyroClient(us)
        stop_event = threading.Event()

        t = threading.Thread(target=start_pyro_client, args=(client, stop_event, us), name=f"Usebot #{client.name}")
        t.start()
        threads[us.id] = dict(thread=t, stop_event=stop_event, client=client)

    except Exception as e:
        loguru.logger.error(
            f"Can't start userbot session {us.name}. Error: {e}, traceback: {traceback.format_exc()}")


import asyncio
import traceback
from aiogram import Bot, Dispatcher, types
import aiogram
import loguru
from etc.keyboards import Keyboards
from loader import *
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from config import API_ID, API_HASH, BOT_TOKEN
from models import TgGroup, TgUser, UserbotSession
from states import AddGroupState, ChangeGroupStates


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
async def sendGroup(msg: Message, group: TgGroup, edit=False):
    func = msg.answer if not edit else msg.edit_text
    ubs_logins = [x.login for x in UserbotSession.objects.all() if x.id in group.ubs]
    try:
        invite = await bot.create_chat_invite_link(group.chat_id)
    except aiogram.utils.exceptions.MigrateToChat as e:
        group.chat_id = e.migrate_to_chat_id
        group.title = group.title + " (Migrated)"
        group.save()
        invite = await bot.create_chat_invite_link(group.chat_id)
        
    await func(f"–ì—Ä—É–ø–ø–∞-—Ñ–∏–ª—å—Ç—Ä <a href='{invite.invite_link}'>{group.title}</a>\n"
                f"–ö–ª—é—á-—Å–ª–æ–≤–∞: <code>{'</code>; <code>'.join(group.keywords)}</code>\n"
                f"–ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞: <code>{'</code>; <code>'.join(group.bad_keywords) if group.bad_keywords else '‚ûñ'}</code>\n"
                f"–ë–ª—ç–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏: <code>{'</code>; <code>'.join(group.blacklist_users) if group.blacklist_users else '‚ûñ'}</code>\n\n"
                f"–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç—ã: <code>{'</code>; <code>'.join(ubs_logins)}</code>\n\n", disable_web_page_preview=True,
                reply_markup=Keyboards.Groups.editGroup(group))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
@dp.callback_query_handler(text_contains="|groups", state="*")
async def _(c: CallbackQuery, state: FSMContext, user: TgUser):
    action = c.data.split(":")[1]
    
    if action == "main":
        groups: TgGroup = TgGroup.objects.all()
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é", reply_markup=Keyboards.Groups.main(groups))

    if action == "new":
        await c.answer()
        await c.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã:\n\n<i>–ü—Ä–∏–º–µ—Ä: OnlyCars</i>")
        await AddGroupState.name.set()

    if action == "see":
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        await sendGroup(c.message, group, True)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    if action == "add":
        await c.answer()
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        key = c.data.split(':')[3]
        await c.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ <b>{key}</b>")
        await state.update_data(editing_group_id=group.chat_id, editing_key=key)
        await ChangeGroupStates.Add.set()
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if action == "change":
        await c.answer()
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        key = c.data.split(':')[3]
        await c.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>{key}</b>. –£—á—Ç–∏—Ç–µ —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è!")
        await state.update_data(editing_group_id=group.chat_id, editing_key=key)
        await ChangeGroupStates.Change.set()
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞
    if action == "clear_popup":
        await c.answer()
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        key = c.data.split(':')[3]
        await c.message.answer(f"–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ <b>{key}</b>‚ùî", reply_markup=Keyboards.Popup(f"|groups:clear:{group.chat_id}:{key}"))
        await state.update_data(editing_group_id=group.chat_id, editing_key=key)
        await ChangeGroupStates.Clear.set()
    # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
    if action == "clear":
        await c.answer()
        await c.message.delete()
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        
        key = c.data.split(':')[3]
        setattr(group, key, [])
        group.save()
        
        await sendGroup(c.message, group)
        await state.finish()
    # –ò–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–≤
    if action == "change_ubots":
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        all_userbots = UserbotSession.objects.all()
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–≤ —á–∞—Ç—ã –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è", 
                                  reply_markup=Keyboards.Groups.chooseUserbots(all_userbots, group.ubs, group))
        await state.update_data(chat_id=group.chat_id, ubs=group.ubs)
        await ChangeGroupStates.ubs.set()
        
    if action == "delete_group_popup":
        await c.answer()
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        await c.message.answer(f"–£–¥–ª–∞–∏—Ç—å –≥—Ä—É–ø–ø—É <b>{group.title}</b>‚ùî", reply_markup=Keyboards.Popup(f"|groups:delete_group:{group.chat_id}"))
    if action == "delete_group":
        await c.answer()
        group: TgGroup = TgGroup.objects.get({'_id': int(c.data.split(':')[2])})
        await c.message.answer(f"üóëÔ∏è –ì—Ä—É–ø–ø–∞ <b>{group.title}</b> —É–¥–∞–ª–µ–Ω–∞")
        group.delete()
        
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=AddGroupState.name)
async def handle_group_name_input(message: types.Message, state: FSMContext):
    val = message.text
    await state.update_data(name=val)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ CHAT ID –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n<i>–ü—Ä–∏–º–µ—Ä: -1001477582245</i>")
    await AddGroupState.chatID.set()  

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ CHAT ID –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=AddGroupState.chatID)
async def _(message: types.Message, state: FSMContext):
    val = message.text[:25]
    try:
        await state.update_data(chatID=int(val))
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chatID, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        loguru.logger.error(f"Error adding group: {e}, {traceback.format_exc()}")
        return
    await message.answer("‚úèÔ∏è –°–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è –ø–æ –∫–æ—Ç–æ—Ä–æ—ã–º —é–∑–µ—Ä–±–æ—Ç –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª—è—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫:\n\n<i>–ü—Ä–∏–º–µ—Ä: –ú–∞—à–∏–Ω–∞\n—Å–º–µ—Ç–∞\n–∫—É–ø–ª—é</i>")
    await AddGroupState.keywords.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@dp.message_handler(state=AddGroupState.keywords)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    try:
        await state.update_data(keywords=[x.lower() for x in val.replace(';', '\n').split('\n')])
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        loguru.logger.error(f"Error adding group: {e}, {traceback.format_exc()}")
        return
    await message.answer("‚úèÔ∏è –°–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—Ç–∏–≤ –∫–æ—Ç–æ—Ä—ã–µ —é–∑–µ—Ä–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n0 - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n\n<i>–ü—Ä–∏–º–µ—Ä: –ë—Ä–∞–∫–æ–≤–∞–Ω–Ω–∞—è\n–±–µ–∑ —Ç–æ—Ä–≥–∞\n–¥–ª—è –¥–µ—Ç–µ–π</i>")
    await AddGroupState.bad_keywords.set()
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤
@dp.message_handler(state=AddGroupState.bad_keywords)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    try:
        if val == "0":
            await state.update_data(bad_keywords=[])
        else:
            await state.update_data(bad_keywords=[x.lower() for x in val.replace(';', '\n').split('\n')])
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        loguru.logger.error(f"Error adding group: {e}, {traceback.format_exc()}")
        return
    await message.answer("‚úèÔ∏è ID –∏–ª–∏ username'—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç:\n\n0 - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n\n<i>–ü—Ä–∏–º–µ—Ä: 2114499242\nHacker213\n609517172</i>")
    await AddGroupState.blacklist.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(state=AddGroupState.blacklist)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    try:
        if val == "0":
            await state.update_data(blacklist=[])
        else:
            await state.update_data(blacklist=[x.lower() for x in val.replace(';', '\n').split('\n')])
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        loguru.logger.error(f"Error adding group: {e}, {traceback.format_exc()}")
        return
    
    userbots = UserbotSession.objects.all()
    
    await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏", reply_markup=Keyboards.Groups.chooseUserbots(userbots))
    await AddGroupState.ubs.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–±–æ—Ç–æ–≤
@dp.callback_query_handler(text_contains="|choose_ubots", state=[AddGroupState.ubs, ChangeGroupStates.ubs])
async def _(c: CallbackQuery, state: FSMContext):
    action = c.data.split(':')[1]
    stateData = await state.get_data()
    ubs: list = stateData.get('ubs', [])
    
    if action == "choose":
        ub_id = c.data.split(':')[2]
        group = None
        print(await state.get_state(), ChangeGroupStates.ubs.state)
        if 'chat_id' in stateData and await state.get_state() == ChangeGroupStates.ubs.state:
            group = TgGroup.objects.get({"_id": stateData['chat_id']})
        if ub_id in ubs:
            ubs.remove(ub_id)
        else:
            ubs.append(ub_id)
        
        await state.update_data(ubs=ubs)
        
        userbots = UserbotSession.objects.all()
        await c.message.edit_reply_markup(Keyboards.Groups.chooseUserbots(userbots, ubs, group))
    if action == "done" and await state.get_state() == AddGroupState.ubs.state:
        await c.answer()
        await c.message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        group = TgGroup(stateData['chatID'], 
        title=stateData['name'], 
        owner_id=c.from_user.id, 
        keywords=stateData['keywords'], 
        bad_keywords=stateData['bad_keywords'], 
        blacklist_users=stateData['blacklist'],
        forwarded_msgs=[],
        ubs=ubs).save()
        
        await sendGroup(c.message, group)
        await c.message.delete()
        await state.finish()
    
    if action == "done" and await state.get_state() == ChangeGroupStates.ubs.state:
        await c.answer()
        
        group: TgGroup = TgGroup.objects.get({"_id": stateData['chat_id']})
        group.ubs = ubs
        group.save()
        
        await sendGroup(c.message, group, True)
        await state.finish()
        
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –æ—á–∏—Å—Ç–∫–∞ –∏—Ç–¥)
@dp.message_handler(state=ChangeGroupStates.Add)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    group = TgGroup.objects.get({"_id": stateData['editing_group_id']})
    editing_key = stateData['editing_key']
    
    current_values = getattr(group, editing_key)
    new_values = current_values + [val.lower()]
    setattr(group, editing_key, new_values)
    
    group.save()
          
    await sendGroup(message, group)
    await state.finish()

@dp.message_handler(state=ChangeGroupStates.Change)
async def _(message: types.Message, state: FSMContext):
    val = message.text
    stateData = await state.get_data()
    group = TgGroup.objects.raw({"_id": stateData['editing_group_id']}).first()
    editing_key = stateData['editing_key']
    if editing_key  in ['keywords', 'bad_keywords', 'blacklist_users']:
        setattr(group, editing_key, [x.lower() for x in val.replace(';', '\n').split('\n')] if val != "0" else [])
    else:
        setattr(group, editing_key, val)
        
    group.save()
          
    await sendGroup(message, group)
    await state.finish()
